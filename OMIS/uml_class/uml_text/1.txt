@startuml
skinparam classAttributeIconSize 0
skinparam linetype ortho
skinparam fixCircleLabelOverlapping true

!pragma layout elk

class Запуск_программы <<main>> <<injector>>

class Главный_контроллер <<injector>>#grey{
-контроллер_оплаты: Контроллер_оплаты
+запустить(): void
}

interface Контроллер_услуг #grey{
+получить_услугу(название: str): Map<название: str, стоимость: float>
+получить_все_услуги():  <название: str, стоимость: float>
+добавить_услугу(<название: str, стоимость: float>): void
+удалить_услугу(название: str): void
+изменить_услугу(название: str): void
+выставить_счет(Постоялец): void
}

class Базовый_контроллер_услуг <<control>> #grey{
-контроллер_постояльцев: Контроллер_постояльцев
-контроллер_номеров: Контроллер_номеров
-услуги: Map<название: str, стоимость: float>
+получить_услугу(название: str): Map<название: str, стоимость: float>
+получить_все_услуги(): Map<название: str, стоимость: float>
+добавить_услугу(<название: str, стоимость: float>): void
+удалить_услугу(название: str): void
+изменить_услугу(название: str): void
+выставить_счет(Постоялец): float
}

class Стандартный_банк <<data>> #grey{
-название:str
-счета: Map<номер: str, сумма: float>
+Стандартный_банк(название:str): void
+получить_название():str
+получить_счета(): Map<номер: str, сумма: float>
}

interface Банк #grey{
+получить_название():str
+получить_счета(): Map<номер: str, сумма: float>
}

interface Контроллер_оплаты<<control>> #grey{
+получить_счет(номер: str): <номер: str, сумма: float>
+пополнить_счет(номер_получателя: str, сумма: float, номер_отправителя: str): void
+снять_со_счета(номер: str, сумма: float): void
}

class Базовый_контроллер_оплаты<<control>> #grey{
-контроллер_услуг: Контроллер_услуг
-банк: Банк
+получить_счет(номер: str): <номер: str, сумма: float>
+пополнить_счет(номер_получателя: str, сумма: float, номер_получателя: str): void
}


interface Контроллер_постояльцев {
+добавить_постояльца(Постоялец): Постоялец
+получить_всех_постояльцев():  List<Постоялец>
+получить_постояльца(серия_номер_паспорта: str): Постоялец
+изменить_постояльца(Постоялец): Постоялец
}

class Базовый_контроллер_постояльцев <<control>>{
-репозиторий_данных: Репозиторий_данных
+добавить_постояльца(Постоялец): Постоялец
+получить_всех_постояльцев():  List<Постоялец>
+получить_постояльца(серия_номер_паспорта: str): Постоялец
+изменить_постояльца(Постоялец): Постоялец
}

interface Контроллер_номеров {
+добавить_номер(Номер): void
+получить_номер(номер: int): Номер
+получить_свободные_номера(): List<Номер>
+изменить_номер(Номер): Номер
}

class Базовый_контроллер_номеров <<control>>{
-репозиторий_данных: Репозиторий_данных
+добавить_номер(Номер): void
+получить_номер(номер: int): Номер
+получить_свободные_номера(): List<Номер>
+изменить_номер(Номер): Номер
}

Главный_контроллер <.. Запуск_программы: <<instantiate>>
Базовый_контроллер_постояльцев <.. Запуск_программы: <<instantiate>>
Базовый_контроллер_номеров<.. Запуск_программы: <<instantiate>>
Базовый_контроллер_услуг <.. Запуск_программы: <<instantiate>>
Базовый_контроллер_оплаты <.. Запуск_программы: <<instantiate>>

Главный_контроллер "1" o-- "1" Контроллер_оплаты: -контроллер_оплаты
Базовый_контроллер_услуг "1" o-- "1" Контроллер_постояльцев: -контроллер_постояльцев
Базовый_контроллер_услуг "1" o-- "1" Контроллер_номеров: -контроллер_номеров
Базовый_контроллер_оплаты "1" o-- "1" Контроллер_услуг: -контроллер_услуг
Базовый_контроллер_оплаты "1" o-- "1" Банк: -банк


Базовый_контроллер_оплаты "1" <.. "1" Главный_контроллер: <<use>>
Стандартный_банк "1" <.. "1" Базовый_контроллер_оплаты: <<use>>
Базовый_контроллер_услуг "1" <.. "1" Базовый_контроллер_оплаты : <<use>>

Базовый_контроллер_постояльцев "1" <.. "1" Базовый_контроллер_услуг : <<use>>
Базовый_контроллер_номеров"1" <.. "1" Базовый_контроллер_услуг : <<use>>

Контроллер_постояльцев<|.. Базовый_контроллер_постояльцев
Контроллер_номеров<|.. Базовый_контроллер_номеров
Контроллер_услуг <|.. Базовый_контроллер_услуг 
Контроллер_оплаты <|.. Базовый_контроллер_оплаты
Банк <|.. Стандартный_банк
@enduml