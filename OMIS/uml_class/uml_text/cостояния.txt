@startuml
skinparam classAttributeIconSize 0
skinparam fixCircleLabelOverlapping true
skinparam linetype ortho

[*] --> Окно_входа: Вход в систему
Окно_входа --> Окно_авторизации_менеджера: Главное окно: начать_авторизацию_менеджера()
Окно_входа --> Окно_авторизации_постояльца: Главное окно: начать_авторизацию_постояльца()
Окно_входа --> Окно_авторизации_сотрудника: Главное окно: начать_авторизацию_сотрудника()



Окно_авторизации_менеджера: entry/ Главное_окно: начать_авторизацию()
Окно_авторизации_менеджера: do /Контроллер_авторизации: авторизация_менеджера(ФИО, пароль)
Окно_авторизации_менеджера --> Окно_авторизации_менеджера: Главное_окно: авторизация_неуспешна()
Окно_авторизации_менеджера --> Окно_выбора_действия_менеджера: Главное_окно: выбрать_действие()

Окно_выбора_действия_менеджера --> Окно_сотрудников: Главное_окно: посмотреть_сотрудников()
Окно_выбора_действия_менеджера --> Окно_оповещений_менеджера: Главное_окно: создать_оповещение()
Окно_выбора_действия_менеджера --> Окно_черного_списка: Главное_окно: взаимодействие_с_черным_списком()
Окно_выбора_действия_менеджера --> [*]: Главное_окно: выйти_из_системы()

Окно_сотрудников: do/ Конроллер_сотрудников: получить_всех_сотрудников()
Окно_сотрудников --> Окно_регистрации_сотрудника: Главное_окно: зарегистрировать_сотрудника()
Окно_сотрудников --> Окно_сотрудника: Главное_окно: посмотреть_сотрудника()
Окно_сотрудников --> Окно_выбора_действия_менеджера: закрыть_окно()

Окно_регистрации_сотрудника: do /Контроллер_регистрации: регистрация_сотрудника(ФИО, пароль, серия_номер_паспорта)
Окно_регистрации_сотрудника --> Окно_сотрудников: закрыть_окно()

Окно_сотрудника: do/ Контроллер_сотрудников: получить_сотрудника(серия_номер_паспорта)
Окно_сотрудника-->Окно_сотрудников: закрыть_окно()


Окно_оповещений_менеджера: entry/ Контроллер_оповещений: получить_историю_оповещений_пользователя(Менеджер)
Окно_оповещений_менеджера: do /Контроллер_оповещений: создать_оповещение(Менеджер, получатель: Пользователь)
Окно_оповещений_менеджера-->Окно_выбора_действия_менеджера:  закрыть_окно()

Окно_черного_списка: entry/ Контроллер_черного_списка: получить_весь_список()
Окно_черного_списка: do /Контроллер_черного_списка: добавить_постояльца(Постоялец)
Окно_черного_списка: do /Контроллер_черного_списка: проверить_наличие(Постоялец)
Окно_черного_списка-->Окно_выбора_действия_менеджера:  закрыть_окно()




Окно_авторизации_сотрудника: entry/ Главное_окно: начать_авторизацию()
Окно_авторизации_сотрудника: do /Контроллер_авторизации: авторизация_сотрудника(ФИО, пароль)
Окно_авторизации_сотрудника--> Окно_авторизации_сотрудника: Главное_окно: авторизация_неуспешна()
Окно_авторизации_сотрудника--> Окно_оповещений_сотрудника: Главное_окно: создать_оповещение(Сотрудник, получатель: Пользователь)

Окно_оповещений_сотрудника: entry/ Контроллер_оповещений: получить_историю_оповещений_пользователя(Сотрудник)
Окно_оповещений_сотрудника: do /Контроллер_оповещений: создать_оповещение(Сотрудник, получатель: Пользователь)
Окно_оповещений_сотрудника --> [*]: Главное_окно: выйти_из_системы()



Окно_авторизации_постояльца: entry/ Главное_окно: начать_авторизацию()
Окно_авторизации_постояльца: do /Контроллер_авторизации: авторизация_постояльца(ФИО, пароль)
Окно_авторизации_постояльца--> Окно_авторизации_постояльца: Главное_окно: авторизация_неуспешна()
Окно_авторизации_постояльца--> Окно_выбора_действия_постояльца: Главное_окно: выбрать_действие()

Окно_выбора_действия_постояльца --> Окно_оповещений_постояльца: Главное_окно: посмотреть_оповещения()
Окно_выбора_действия_постояльца --> Окно_просмотра_сотрудников: Главное_окно: посмотреть_персонал()
Окно_выбора_действия_постояльца --> Окно_ресторана: Главное_окно: сделать_заказ_в_ресторане()
Окно_выбора_действия_постояльца --> Окно_номера: Главное_окно: посмотреть_номер()
Окно_выбора_действия_постояльца --> [*]: Главное_окно: выйти_из_системы()

Окно_оповещений_постояльца: entry/ Контроллер_оповещений: получить_историю_оповещений_пользователя(Постоялец)
Окно_оповещений_постояльца: do /Контроллер_оповещений: создать_оповещение(Постоялец, получатель: Пользователь)
Окно_оповещений_постояльца --> Окно_выбора_действия_постояльца:  закрыть_окно()

Окно_просмотра_сотрудников: do /Контроллер_сотрудников: получить_всех_сотрудников()
Окно_просмотра_сотрудников --> Окно_выбора_действия_постояльца:  закрыть_окно()

Окно_ресторана: enry/ Контоллер_ресторана: получить_меню()
Окно_ресторана: do/ Контроллер_ресторана: сделать_заказ(Map<List<блюдо: str>, время: DateTime>, кол_человек: int)
Окно_ресторана --> Окно_выбора_действия_постояльца:  закрыть_окно()

Окно_номера: do /Контроллер_номеров: получить_номер(номер:int)
Окно_номера--> Окно_выбора_действия_постояльца:  закрыть_окно()
Окно_номера --> Окно_бронирования: Главное_окно: номер_не забронирован()

Окно_бронирования: entry/ Контроллер_номеров: получить_свободные_номера()
Окно_бронирования: do/ Контроллер_бронирования: добавить_бронь()
Окно_бронирования --> Окно_номера: закрыть_окно()
@enduml