@startuml
skinparam classAttributeIconSize 0
skinparam fixCircleLabelOverlapping true 
skinparam linetype ortho

class Запуск_программы <<main>> <<injector>>{
+запуск_программы()
}

interface Репозиторий_данных{
 +получить_постояльцев(): List<Постоялец>
 +получить_менеджера(): Менеджер
 +получить_сотрудников(): List<Сотрудник>
 +получить_ресторан(): Ресторан
 +получить_историю_оповещений(): История_оповещений
 +получить_черный_список(): Черный_список
 +получить_номера(): List<Номер>
}

class Стандартный_репозиторий_данных{
 -постояльцы: List<Постоялец>
 -менеджер: Менеджер
 -сотрудники: List<Сотрудник>
 -ресторан: Ресторан
 -история_оповещений: История_оповещений
 -черный_список: Черный_список
 -номера: List<Номер>
 +получить_постояльцев(): List<Постоялец>
 +получить_менеджера(): Менеджер
 +получить_сотрудников(): List<Сотрудник>
 +получить_ресторан(): Ресторан
 +получить_историю_оповещений(): История_оповещений
 +получить_черный_список(): Черный_список
 +получить_номера(): List<Номер>
}

interface Пользователь{
 +получить_ФИО(): str
 +получить_пароль(): str
 +получить_номер_телефона(): str
 +получить_серия_номер_паспорта(): str
}

interface Сотрудник{
 +получить_должность(): str
 +получить_рабочее_место(): str
 +получить_график работы(): str
}

class Стандартный_сотрудник <<data>>{
 -ФИО: str
 -серия_номер_паспорта: str
 -номер_телефона: str
 -должность: str
 -рабочее_место: str
 -график работы: str
 -пароль: str
 +Стандартный_сотрудник(ФИО: str, пароль: str, серия_номер_паспорта: str): void
 +получить_ФИО(): str
 +получить_пароль(): str
 +получить_номер_телефона(): str
 +получить_серия_номер_паспорта(): str
 +получить_должность(): str
 +получить_рабочее_место(): str
 +получить_график работы(): str
}

interface Менеджер{
 +получить_график работы(): str
 +получить_черный_список(): Черный_список
}

class Стандартный_менеджер <<data>>{
 -ФИО: str
 -серия_номер_паспорта: str
 -номер_телефона: str
 -график работы: str
 -черный_список: Черный_список
 -пароль: str
 +Стандартный_менеджер(ФИО: str, пароль: str, серия_номер_паспорта: str): void
 +получить_ФИО(): str
 +получить_пароль(): str
 +получить_номер_телефона(): str
 +получить_серия_номер_паспорта(): str
 +получить_график работы(): str
 +получить_черный_список(): Черный_список
}

interface Постоялец{
 +получить_номер(): Номер
 +получить_время_заселения(): DateTime
 +получить_время выселения(): DateTime
 +получить_список_предоставленных_услуг(): List<str>
}

class Стандартный_постоялец <<data>>{
 -ФИО: str
 -серия_номер_паспорта: str
 -номер_телефона: str
 -пароль: str
 -номер: Номер
 -время_заселения: DateTime
 -время выселения: DateTime
 -список_предоставленных_услуг: List<str>
 +Стандартный_постоялец(ФИО: str, пароль: str, серия_номер_паспорта: str): void
 +получить_ФИО(): str
 +получить_пароль(): str
 +получить_номер_телефона(): str
 +получить_серия_номер_паспорта(): str
 +получить_номер(): Номер
 +получить_время_заселения(): DateTime
 +получить_время выселения(): DateTime
 +получить_список_предоставленных_услуг(): List<str>
}

interface Номер{
 +получить_номер(): int
 +получить_статус_брони(): str
 +получить_количество_мест(): int
 +получить_статус_уборки(): str
 +получить_статус_вызова_сотрудника(): str
 +полчить_стоимость_за_сутки(): float
}

class Стандартный_номер <<data>>{
 -номер: int
 -статус_брони: str
 -количество_мест: int
 -статус_уборки: str
 -статус_вызова_сотрудника: str
 -стоимость_за_сутки: float
 +Стандартный_номер(номер: int, количество_мест: int): void
 +получить_номер(): int
 +получить_статус_брони(): str
 +получить_количество_мест(): int
 +получить_статус_уборки(): str
 +получить_статус_вызова_сотрудника(): str
 +полчить_стоимость_за_сутки(): float
}

interface Оповещение{
 +получить_отправителя(): Пользователь
 +получить_получателя(): Пользователь
 +получить_описание(): str
}

class Стандартное_оповещение <<data>>{
 -отправитель: Пользователь
 -получатель: Пользователь
 -описание: str
 +Стандартное_оповещение(отправитель: Пользователь, получатель: Пользователь): void
 +получить_отправителя(): Пользователь
 +получить_получателя(): Пользователь
 +получить_описание(): str
}

interface Черный_список{
 +получить_список(): List<Постоялец>
}

class Стандартный_черный_список <<data>>{
 -список: List<Постоялец>
 +Стандартный_черный_список(Постоялец): void
 +получить_список(): List<Постоялец>
}

interface Ресторан {
 +получить_название():str
 +получить_список_столиков(): List<Столик>
 +получить_столик(номер): Столик
 +получить_меню(): Map<блюдо: str, цена: float>
 +получить_заказы(): Map<List<блюдо: str>, время: DateTime, кол_человек: int>
}

class Стандартный_ресторан <<data>>{
 -название:str
 -список_столиков: List<Столик>
 -меню: Map<блюдо: str, цена: float>
 -заказы: Map<List<блюдо: str>, время: DateTime, кол_человек: int>
 +Стандартный_ресторан(название:str): void
 +получить_название():str
 +получить_список_столиков(): List<Столик>
 +получить_столик(номер): Столик
 +получить_меню(): Map<блюдо: str, цена: float>
 +получить_заказы(): Map<List<блюдо: str>, время: DateTime, кол_человек: int>
}

interface Столик{
 +получить_статус_брони(): str
 +получить_номер(): int
 +получить_количество_мест(): int
}

class Стандартный_столик <<data>>{
 -номер: int
 -количество_мест: int
 -статус_брони: str
 +Стандартный_столик(номер: int, количество_мест: int)
 +получить_статус_брони(): str
 +получить_номер(): int
 +получить_количество_мест(): int
}

interface История_оповещений{
 +получить_оповещения(отправитель, получатель): List<Оповещение>
 +получить_список_оповещений(): List<Оповещение>
}

class Стандартная_история_оповещений <<data>>{
 -список: List<Оповещение>
 +Стандартная_история_оповещений(): void
 +получить_оповещения(отправитель, получатель): List<Оповещение>
 +получить_список_оповещений(): List<Оповещение>
}

Пользователь<|.. Стандартный_менеджер
Пользователь<|.. Стандартный_сотрудник
Пользователь<|.. Стандартный_постоялец
Менеджер <|.. Стандартный_менеджер
Сотрудник<|.. Стандартный_сотрудник
Постоялец<|.. Стандартный_постоялец
Номер<|.. Стандартный_номер
Ресторан<|.. Стандартный_ресторан
Столик<|.. Стандартный_столик
Черный_список <|.. Стандартный_черный_список
История_оповещений <|.. Стандартная_история_оповещений
Оповещение<|.. Стандартное_оповещение
Репозиторий_данных <|.. Стандартный_репозиторий_данных 

Номер "1"<--"0..*" Стандартный_постоялец: -номер
Стандартный_номер <.. Стандартный_постоялец: <<use>>
Стандартный_ресторан"1" o-- "1..*" Столик: -список_столиков
Стандартный_столик <.. Стандартный_ресторан: <<use>>
Черный_список"1"<--"1" Стандартный_менеджер: -черный_список
Стандартный_черный_список <.. Стандартный_менеджер: <<use>>
Пользователь "2"<--"1" Стандартное_оповещение: -отправитель, -получатель
Стандартный_менеджер <.. Стандартное_оповещение: <<use>>
Стандартный_постоялец <.. Стандартное_оповещение: <<use>>
Стандартный_сотрудник <.. Стандартное_оповещение: <<use>>
Стандартный_черный_список "1" o-- "1..*" Постоялец : -список
Стандартный_постоялец <.. Стандартный_черный_список: <<use>>
Стандартная_история_оповещений "1" o-- "0..*" Оповещение : -список
Стандартное_оповещение <.. Стандартная_история_оповещений : <<use>>

Стандартный_репозиторий_данных "1" o-- "0..*" Постоялец: -постояльцы
Стандартный_постоялец <.. Стандартный_репозиторий_данных : <<use>>
Стандартный_репозиторий_данных "1" o-- "1" Менеджер: -менеджер
Стандартный_менеджер <.. Стандартный_репозиторий_данных : <<use>>
Стандартный_репозиторий_данных "1" o-- "0..*" Сотрудник: -сотрудники
Стандартный_сотрудник <.. Стандартный_репозиторий_данных : <<use>>
Стандартный_репозиторий_данных "1" o-- "1" Ресторан: -ресторан
Стандартный_ресторан <.. Стандартный_репозиторий_данных : <<use>>
Стандартный_репозиторий_данных "1" o-- "1" История_оповещений: -постояльцы
Стандартная_история_оповещений <.. Стандартный_репозиторий_данных : <<use>>
Стандартный_репозиторий_данных "1" o-- "1" Черный_список: -постояльцы
Стандартный_черный_список <.. Стандартный_репозиторий_данных : <<use>>
Стандартный_репозиторий_данных "1" o-- "1..*" Номер: -номера
Стандартный_номер <.. Стандартный_репозиторий_данных : <<use>>

Стандартный_репозиторий_данных <.. Запуск_программы: <<instantiate>>
@enduml