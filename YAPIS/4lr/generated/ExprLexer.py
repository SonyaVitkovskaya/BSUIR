# Generated from ExprLexer.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,43,298,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,1,0,1,0,1,0,1,0,1,0,1,1,1,
        1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,
        4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,
        7,1,7,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,
        10,1,10,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,
        13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,
        14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,
        16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,21,1,21,1,
        22,1,22,1,22,1,23,1,23,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,
        27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,
        33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,37,1,
        37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,
        38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,
        38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,
        39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,40,4,40,281,8,40,11,
        40,12,40,282,1,41,1,41,5,41,287,8,41,10,41,12,41,290,9,41,1,42,4,
        42,293,8,42,11,42,12,42,294,1,42,1,42,0,0,43,1,1,3,2,5,3,7,4,9,5,
        11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,
        17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,
        28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,
        39,79,40,81,41,83,42,85,43,1,0,4,1,0,48,57,3,0,65,90,95,95,97,122,
        4,0,48,57,65,90,95,95,97,122,3,0,9,10,12,13,32,32,300,0,1,1,0,0,
        0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,
        13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,
        23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,
        33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,
        43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,
        53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,
        63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,
        73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,
        83,1,0,0,0,0,85,1,0,0,0,1,87,1,0,0,0,3,92,1,0,0,0,5,98,1,0,0,0,7,
        102,1,0,0,0,9,108,1,0,0,0,11,113,1,0,0,0,13,117,1,0,0,0,15,121,1,
        0,0,0,17,127,1,0,0,0,19,130,1,0,0,0,21,135,1,0,0,0,23,142,1,0,0,
        0,25,147,1,0,0,0,27,153,1,0,0,0,29,160,1,0,0,0,31,169,1,0,0,0,33,
        178,1,0,0,0,35,180,1,0,0,0,37,182,1,0,0,0,39,184,1,0,0,0,41,186,
        1,0,0,0,43,188,1,0,0,0,45,192,1,0,0,0,47,195,1,0,0,0,49,199,1,0,
        0,0,51,201,1,0,0,0,53,203,1,0,0,0,55,205,1,0,0,0,57,207,1,0,0,0,
        59,209,1,0,0,0,61,211,1,0,0,0,63,213,1,0,0,0,65,215,1,0,0,0,67,217,
        1,0,0,0,69,219,1,0,0,0,71,221,1,0,0,0,73,223,1,0,0,0,75,225,1,0,
        0,0,77,244,1,0,0,0,79,265,1,0,0,0,81,280,1,0,0,0,83,284,1,0,0,0,
        85,292,1,0,0,0,87,88,5,110,0,0,88,89,5,111,0,0,89,90,5,100,0,0,90,
        91,5,101,0,0,91,2,1,0,0,0,92,93,5,103,0,0,93,94,5,114,0,0,94,95,
        5,97,0,0,95,96,5,112,0,0,96,97,5,104,0,0,97,4,1,0,0,0,98,99,5,97,
        0,0,99,100,5,114,0,0,100,101,5,99,0,0,101,6,1,0,0,0,102,103,5,110,
        0,0,103,104,5,111,0,0,104,105,5,100,0,0,105,106,5,101,0,0,106,107,
        5,115,0,0,107,8,1,0,0,0,108,109,5,97,0,0,109,110,5,114,0,0,110,111,
        5,99,0,0,111,112,5,115,0,0,112,10,1,0,0,0,113,114,5,105,0,0,114,
        115,5,110,0,0,115,116,5,116,0,0,116,12,1,0,0,0,117,118,5,102,0,0,
        118,119,5,111,0,0,119,120,5,114,0,0,120,14,1,0,0,0,121,122,5,119,
        0,0,122,123,5,104,0,0,123,124,5,105,0,0,124,125,5,108,0,0,125,126,
        5,101,0,0,126,16,1,0,0,0,127,128,5,105,0,0,128,129,5,102,0,0,129,
        18,1,0,0,0,130,131,5,101,0,0,131,132,5,108,0,0,132,133,5,115,0,0,
        133,134,5,101,0,0,134,20,1,0,0,0,135,136,5,115,0,0,136,137,5,119,
        0,0,137,138,5,105,0,0,138,139,5,116,0,0,139,140,5,99,0,0,140,141,
        5,104,0,0,141,22,1,0,0,0,142,143,5,99,0,0,143,144,5,97,0,0,144,145,
        5,115,0,0,145,146,5,101,0,0,146,24,1,0,0,0,147,148,5,98,0,0,148,
        149,5,114,0,0,149,150,5,101,0,0,150,151,5,97,0,0,151,152,5,107,0,
        0,152,26,1,0,0,0,153,154,5,114,0,0,154,155,5,101,0,0,155,156,5,116,
        0,0,156,157,5,117,0,0,157,158,5,114,0,0,158,159,5,110,0,0,159,28,
        1,0,0,0,160,161,5,99,0,0,161,162,5,111,0,0,162,163,5,110,0,0,163,
        164,5,116,0,0,164,165,5,105,0,0,165,166,5,110,0,0,166,167,5,117,
        0,0,167,168,5,101,0,0,168,30,1,0,0,0,169,170,5,102,0,0,170,171,5,
        117,0,0,171,172,5,110,0,0,172,173,5,99,0,0,173,174,5,116,0,0,174,
        175,5,105,0,0,175,176,5,111,0,0,176,177,5,110,0,0,177,32,1,0,0,0,
        178,179,5,43,0,0,179,34,1,0,0,0,180,181,5,45,0,0,181,36,1,0,0,0,
        182,183,5,47,0,0,183,38,1,0,0,0,184,185,5,38,0,0,185,40,1,0,0,0,
        186,187,5,42,0,0,187,42,1,0,0,0,188,189,5,97,0,0,189,190,5,110,0,
        0,190,191,5,100,0,0,191,44,1,0,0,0,192,193,5,111,0,0,193,194,5,114,
        0,0,194,46,1,0,0,0,195,196,5,110,0,0,196,197,5,111,0,0,197,198,5,
        116,0,0,198,48,1,0,0,0,199,200,5,61,0,0,200,50,1,0,0,0,201,202,5,
        44,0,0,202,52,1,0,0,0,203,204,5,59,0,0,204,54,1,0,0,0,205,206,5,
        58,0,0,206,56,1,0,0,0,207,208,5,33,0,0,208,58,1,0,0,0,209,210,5,
        91,0,0,210,60,1,0,0,0,211,212,5,93,0,0,212,62,1,0,0,0,213,214,5,
        60,0,0,214,64,1,0,0,0,215,216,5,62,0,0,216,66,1,0,0,0,217,218,5,
        40,0,0,218,68,1,0,0,0,219,220,5,41,0,0,220,70,1,0,0,0,221,222,5,
        123,0,0,222,72,1,0,0,0,223,224,5,125,0,0,224,74,1,0,0,0,225,226,
        5,100,0,0,226,227,5,101,0,0,227,228,5,112,0,0,228,229,5,116,0,0,
        229,230,5,104,0,0,230,231,5,95,0,0,231,232,5,102,0,0,232,233,5,105,
        0,0,233,234,5,114,0,0,234,235,5,115,0,0,235,236,5,116,0,0,236,237,
        5,95,0,0,237,238,5,115,0,0,238,239,5,101,0,0,239,240,5,97,0,0,240,
        241,5,114,0,0,241,242,5,99,0,0,242,243,5,104,0,0,243,76,1,0,0,0,
        244,245,5,98,0,0,245,246,5,114,0,0,246,247,5,101,0,0,247,248,5,97,
        0,0,248,249,5,100,0,0,249,250,5,116,0,0,250,251,5,104,0,0,251,252,
        5,95,0,0,252,253,5,102,0,0,253,254,5,105,0,0,254,255,5,114,0,0,255,
        256,5,115,0,0,256,257,5,116,0,0,257,258,5,95,0,0,258,259,5,115,0,
        0,259,260,5,101,0,0,260,261,5,97,0,0,261,262,5,114,0,0,262,263,5,
        99,0,0,263,264,5,104,0,0,264,78,1,0,0,0,265,266,5,115,0,0,266,267,
        5,104,0,0,267,268,5,111,0,0,268,269,5,114,0,0,269,270,5,116,0,0,
        270,271,5,101,0,0,271,272,5,115,0,0,272,273,5,116,0,0,273,274,5,
        95,0,0,274,275,5,112,0,0,275,276,5,97,0,0,276,277,5,116,0,0,277,
        278,5,104,0,0,278,80,1,0,0,0,279,281,7,0,0,0,280,279,1,0,0,0,281,
        282,1,0,0,0,282,280,1,0,0,0,282,283,1,0,0,0,283,82,1,0,0,0,284,288,
        7,1,0,0,285,287,7,2,0,0,286,285,1,0,0,0,287,290,1,0,0,0,288,286,
        1,0,0,0,288,289,1,0,0,0,289,84,1,0,0,0,290,288,1,0,0,0,291,293,7,
        3,0,0,292,291,1,0,0,0,293,294,1,0,0,0,294,292,1,0,0,0,294,295,1,
        0,0,0,295,296,1,0,0,0,296,297,6,42,0,0,297,86,1,0,0,0,4,0,282,288,
        294,1,6,0,0
    ]

class ExprLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    NODE = 1
    GRAPH = 2
    ARC = 3
    N_ELEM = 4
    A_ELEM = 5
    TYPE_INT = 6
    FOR = 7
    WHILE = 8
    IF = 9
    ELSE = 10
    SWITCH = 11
    CASE = 12
    BREAK = 13
    RETURN = 14
    CONTINUE = 15
    FUNCTION = 16
    UNION = 17
    DIFF = 18
    SYMDIFF = 19
    INTERSEC = 20
    CART = 21
    AND = 22
    OR = 23
    NOT = 24
    EQ = 25
    COMMA = 26
    SEMI = 27
    COLON = 28
    EXCLAM = 29
    LSQUARE = 30
    RSQUARE = 31
    LANGLE = 32
    RANGLE = 33
    LPAREN = 34
    RPAREN = 35
    LCURLY = 36
    RCURLY = 37
    DEPTH_FIRST_SEARCH = 38
    BREADTH_FIRST_SEARCH = 39
    SHORTEST_PATH = 40
    INT = 41
    ID = 42
    WS = 43

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'node'", "'graph'", "'arc'", "'nodes'", "'arcs'", "'int'", 
            "'for'", "'while'", "'if'", "'else'", "'switch'", "'case'", 
            "'break'", "'return'", "'continue'", "'function'", "'+'", "'-'", 
            "'/'", "'&'", "'*'", "'and'", "'or'", "'not'", "'='", "','", 
            "';'", "':'", "'!'", "'['", "']'", "'<'", "'>'", "'('", "')'", 
            "'{'", "'}'", "'depth_first_search'", "'breadth_first_search'", 
            "'shortest_path'" ]

    symbolicNames = [ "<INVALID>",
            "NODE", "GRAPH", "ARC", "N_ELEM", "A_ELEM", "TYPE_INT", "FOR", 
            "WHILE", "IF", "ELSE", "SWITCH", "CASE", "BREAK", "RETURN", 
            "CONTINUE", "FUNCTION", "UNION", "DIFF", "SYMDIFF", "INTERSEC", 
            "CART", "AND", "OR", "NOT", "EQ", "COMMA", "SEMI", "COLON", 
            "EXCLAM", "LSQUARE", "RSQUARE", "LANGLE", "RANGLE", "LPAREN", 
            "RPAREN", "LCURLY", "RCURLY", "DEPTH_FIRST_SEARCH", "BREADTH_FIRST_SEARCH", 
            "SHORTEST_PATH", "INT", "ID", "WS" ]

    ruleNames = [ "NODE", "GRAPH", "ARC", "N_ELEM", "A_ELEM", "TYPE_INT", 
                  "FOR", "WHILE", "IF", "ELSE", "SWITCH", "CASE", "BREAK", 
                  "RETURN", "CONTINUE", "FUNCTION", "UNION", "DIFF", "SYMDIFF", 
                  "INTERSEC", "CART", "AND", "OR", "NOT", "EQ", "COMMA", 
                  "SEMI", "COLON", "EXCLAM", "LSQUARE", "RSQUARE", "LANGLE", 
                  "RANGLE", "LPAREN", "RPAREN", "LCURLY", "RCURLY", "DEPTH_FIRST_SEARCH", 
                  "BREADTH_FIRST_SEARCH", "SHORTEST_PATH", "INT", "ID", 
                  "WS" ]

    grammarFileName = "ExprLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


